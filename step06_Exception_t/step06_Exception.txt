step06_Exception

[학습]
1. 예외(Exception)
	- 사용자 혹은 개발자의 잘못으로 발생하는 프로그램 오류, 처리 가능한 에러
	- 에러 발생시 지속적인 서비스 제공을 위함
	- 종류
		- 일반 예외 : 컴파일 계열(ClassNotFoundException, ...)
			- java.lang.RuntimeException외의 모든 예외 클래스
			- 제약조건 : try~catch 블록으로 처리 필수
			
		- 실행 예외 : 런타임 계열(NullPointerExeption, ClassCastException, ...)
			- java.lang.RuntimeException 상속받는 모든 예외 클래스
			- try~catch는 옵션
			
	- 문법
		- 예외 발생가능성 존재하는 library 사용시 문법
		- 문법 1
				try{								
					예외 발생 가능성 존재 수행 코드;	
				}catch(발생 가능성 예외 Exception변수){
					예외 처리 수행 코드;
				}
			
		- 문법 2
				try{
					예외 발생 가능성 존재 수행 코드;	
				}catch(발생 가능성 예외 Exception변수){
					예외 처리 수행 코드;
				}finally{							
					예외발생 여부와 무관, 무조건 실행되는 블럭
					**자원 반환 로직
					(ex DB접속 해제, IO 자원 해제, ..)
				}
			
		- 개발 상황에 따른 예외 발생 문법 
		    - body{}영역에 
				throw new 생성자명([..]); 구현
			
			- 메소드 선언구에 발생 가능성 예외 알림 표기	
				반환타입 메소드명([...]) throws~Exception[, ~Exception2] {}
		
		- 사용자 정의 예외 클래스
		- 상황에 맞는 클래스 이름 자체가 메세지가 되기 때문
			- 컴파일 계열
				java.lang.Exception 상속
				생성자 두개 다중정의
					- 기본 생성자
					- String 매개변수 존재 생성자
		
			- 런타입 계열
				java.lang.RuntimeException 상속
				생성자 두개 다중정의
		