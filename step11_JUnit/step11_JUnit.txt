step11_JUnit

[학습]
1. JUnit
	- 자바용 단위 테스트 작성을 위한 프레임워크
	- 단위 테스트(Unit Test)
		- 원하는 특정 기능 수행이 의도된 대로 작동하는지 검증
		- 메소드에 대한 테스트 케이스(Test Case) 작성
	
	- JUnit5
		- 런타임때 Java8버전(혹은 그 이상)이 필요
		- 이전 버전 JDK에서 컴파일된 코드 테스트 가능
		- JUnit Jupiter : JUnit5에서의 테스트 작성을 위한 새로운 확장 모델
		
	- 사용방법
		- 설정 : 테스트 대상 프로젝트 우클릭 - Java Build Path - Add Library - JUnit5 선택 - Finish, Apply
		- 적용 : 테스트 대상 프로젝트 우클릭 - JUnit Test Case - Source Folder, Package, Name, Under Class 선택
	
	- 기본 Annotation
		@BeforeAll
			- 현재 클래스의 모든 테스트 메소드 전에 실행
			- static
			
		@BeforeEach
			- 각 테스트 메소드 전에 실행
			
		@DisplayName
			- 테스트 클래스 혹은 테스트 메소드의 이름을 정의
			
		@Disabled
			- 테스트 클래스 혹은 테스트 메소드 비활성화
		
		@AfterAll
			- 현재 클래스의 모든 테스트 메소드 후에 실행
			- static
			
		@AfterEach
			- 각 테스트 메소드 후에 실행
	
	- 자주 사용하는 메소드
		Assertions[assert]
			Equals(a, b);
				- a, b의 값이 일치하는지 확인
				
			ArrayEquals(a, b);
				- 배열 a, b의 값이 일치하는지 확인
			
			Same(a, b); 
			
			True(조건);, False(조건);
			
			NotNull(a);
				- 객체a가 null인지 확인
		
		Assumptions[assume]
			True(조건);, False(조건);
			
			assumingThat(조건( ([]) -> 메소드 ));
				- 조건이 참일때, 내부 메소드 실행
	
	- 인자값을 활용한 Annotation
		@ParameterizedTest
		@CsvSource 
			- ,(콤마)로 구분된 각각의 데이터 값을 파라미터로 이용
			- @Test 실행 당 여러개 파라미터 값을 전달 때 사용 가능

[참고]
https://junit.org/junit5/
