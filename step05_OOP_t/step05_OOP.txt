step05_OOP

캡슐화, 상속, 다형성
[학습]
1. API(Application Programming Interface)
	- 프로그램 개발을 위해 제공되는 클래스 및 인터페이스 모음
	- 라이브러리(Libarary)라고도 함
	- String, System, ...
	- https://docs.oracle.com/javase/8/docs/api/
	- 주로 java.lang, java.util, java.time 패키지를 사용
		
2. 상속(Inheritance)
	- 부모(Parent/Super)가 자식(Child/Sub)에게 물려주는 행위
	- 클래스 구성요소 "변수"와 "메소드"만 상속
	- java.lang.Object : 모든 class 최상위

	- 필요성 : 코드의 재사용성 -> 개발 속도 향상
	
	- 제약 : 자식 = 부모 관계에서만 성립
	
	- 문법
	 class 자식클래스명 extends 부모클래스{
		변수와 메소드만 상속
		자식만의 변수, 메소드 추가 개발 가능
	 }
		
	 - 자동 생성되는 코드
		- 클래스 선언구
			extends Object
		- 생성자
			미 구현시 자동 추가
			생성자별 첫라인 부모 생성자 '호출' : super();
	 
	 - 메소드 재정의(오버라이딩 overriding/override)
		- 반환타입 메소드명 argument list는 100% 동일
		- {} body 부분을 수정
		- 부모의 메소드 로직을 그대로 반영하여 자식에서 사용할 경우, super()
	
	- 키워드
		- super
			- 상위 타입 의미
			- super. : 상위, 부모의 멤버변수 호출 / 메소드 재정의시 사용
			- super([...]) : 생성자 내부의 첫 라인에서 부모 생성자 호출시 사용
							 this()없는 경우, 컴파일 시점에 생성자 첫 라인에 자동 추가
	
		- this
			- 자신 타입 의미
			- this. : 주로 로컬변수와 멤버변수명이 동일한 경우 멤버변수 임의 지정으로 사용
			- this([...]) : 필요에 의해 명시적으로 코딩해야 사용 가능
							동일 클래스 내에 다른 생성자 호출시 사용
	
3. 다형성(Polymorphism)
	- 상속 전제 조건
	- 속성(데이터)들이 일치하는 존재 클래스(super/parent/부모)를 기반으로 하위 클래스 개발
	- 문법
			상위타입 변수 = 모든 자식 객체;
			자식타입 변수 = (자식타입)상위타입변수;
		
	- public void method(Object v){
		객체 타입이면 처리 가능한 로직의 재사용성 극대화 메소드
	  }
	  
	- 다형성 필요성
		class A{} -> class A extends Object{}
		class B{} extends A{}
		class C{} extends B{}
		class D{} -> class D extends Object{}
		
		- 클래스 상속 관계도

			Object
			 /  \
			A	 D
			|
			B
			|
			C
		
		Object o = new Object(); ( O ) 
		= new A(); ( O )
		= new B(); ( O )
		= new C(); ( O )
		= new D(); ( O )

		A o = new Object(); ( X )
		= new A(); ( O )
		= new B(); ( O )
		= new C(); ( O )
		= new D(); ( X )
	
		B o = new Object();  ( X )
		= new A(); ( X )
		= new B(); ( O )
		= new C(); ( O )
		= new D(); ( X )
		
		C o = new Object(); ( X )
		= new A(); ( X )
		= new B(); ( X )
		= new C(); ( O )
		= new D(); ( X )
	
		D o = new Object(); ( X )
		= new A(); ( X )
		= new B(); ( X )
		= new C(); ( X )
		= new D(); ( O )
	
4. 인터페이스(Interface)
	- 객체의 사용방법을 정의
	- 상속, 다중상속 가능
	- 상위 interface는 동시 여러개 구현 가능
	- 제약조건 : 하위 클래스에서는 미완성 메소드 재정의
	- 문법
		[public] interface 인터페이스명{...}
		
	- 구성요소
		1. 상수
			[public static final] 타입 상수명;
		
		2. 메소드
			[public abstract] 리턴타입 메소드명(...);
			abstract : 추상, 미완성
			{} 코드블럭 미존재